/*
 *  TBD
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <vector>
#include "xil_printf.h"
#include "xgpiops.h"
#include "sleep.h"

#define PS_LED_PIN   47  //MIO pin 47 = PS LED on MicroZed

#define PL_LED_PIN   54  //= EMIO pin 0, connected to LEDs on the carrier board
#define PL_EVEN_PIN  55  //= EMIO pin 1, connected to even pins on the carrier board
#define PL_ODD_PIN   56  //= EMIO pin 2, connected to odd pins on the carrier board

XGpioPs GpioInstance;

int initialiseGPIO()
{
	XGpioPs_Config *GpioConfig;

	GpioConfig = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
	if(GpioConfig == NULL) {
		print("XGpioPs_LookupConfig failed\r\n");
		return XST_FAILURE;
	}

	int Status = XGpioPs_CfgInitialize(&GpioInstance, GpioConfig, GpioConfig->BaseAddr);
	if(Status != XST_SUCCESS) {
		print("XGpioPs_CfgInitialize failed\r\n");
		return XST_FAILURE;
	}

	const std::vector<int> outputPins = { PS_LED_PIN, PL_LED_PIN, PL_EVEN_PIN, PL_ODD_PIN  };
	for( auto p : outputPins ) {
		XGpioPs_SetDirectionPin(&GpioInstance, p, 1 /*output*/);
		XGpioPs_SetOutputEnablePin(&GpioInstance, p, 1 /*enable*/);
	}

    return XST_SUCCESS;
}


int main()
{
    print("***** MicroZed carrier board demo started *****\n\r");

    if( initialiseGPIO() != XST_SUCCESS )
    	return XST_FAILURE;

    const unsigned SLEEP_INTERVAL{100},
	               LED_TICKS{1999},     //  2.5 Hz
                   EVEN_PIN_TICKS{61},  // 80.6 Hz
				   ODD_PIN_TICKS{29};   //166.6 Hz
    unsigned LEDTickCounter{0}, EvenPinTickCounter{0}, OddPinTickCounter{0};
    unsigned LEDState{0}, EvenPinState{0}, OddPinState{0};

    while(1) {
        if( LEDTickCounter == LED_TICKS ) {
        	LEDTickCounter = 0;
        	LEDState = !LEDState;
        	XGpioPs_WritePin( &GpioInstance, PS_LED_PIN, LEDState );
        	XGpioPs_WritePin( &GpioInstance, PL_LED_PIN, LEDState );
        }
        else
        	LEDTickCounter++;

        if( EvenPinTickCounter == EVEN_PIN_TICKS ) {
        	EvenPinTickCounter = 0;
        	EvenPinState = !EvenPinState;
        	XGpioPs_WritePin( &GpioInstance, PL_EVEN_PIN, EvenPinState );
        }
        else
        	EvenPinTickCounter++;

        if( OddPinTickCounter == ODD_PIN_TICKS ) {
        	OddPinTickCounter = 0;
        	OddPinState = !OddPinState;
        	XGpioPs_WritePin( &GpioInstance, PL_ODD_PIN, OddPinState );
        }
        else
        	OddPinTickCounter++;

    	usleep( SLEEP_INTERVAL );
    }

    return 0; //never reach
}
